{"version":3,"file":"static/js/621.46714195.chunk.js","mappings":"+KAYA,MAsBA,EAtBoDA,IAAyB,IAAxB,KAAEC,EAAI,SAAEC,GAAUF,EACrE,GAAI,cAAeC,EACjB,OAAQA,EAAKE,WACX,IAAK,eACH,OACEC,EAAAA,EAAAA,KAAA,OACEC,UAAS,iBAAAC,OACPL,EAAKM,eAAiB,yBAA2B,IAChDL,SAEFA,IAGP,IAAK,OACH,OAAOE,EAAAA,EAAAA,KAAA,OAAAF,SAAMA,IACf,QACE,OAAO,KAGb,OAAO,IAAI,E,+BClBb,MAkDA,EAlD2BF,IAAiC,IAAhC,KAAEQ,GAAwBR,EACpD,MAAMS,GAAQC,EAAAA,EAAAA,GAAkBF,IACzBG,EAASC,IAAcC,EAAAA,EAAAA,eAC5BC,GAEIC,GAAgBC,EAAAA,EAAAA,MA+BtB,OAjBAC,EAAAA,EAAAA,YAAU,KACJR,GACFG,EAAWH,EAAME,UACjBO,EAAAA,EAAAA,GAAyBV,EAAMC,IAE/BG,OAAWE,EACb,GACC,CAACL,EAAOD,KAGXS,EAAAA,EAAAA,YAAU,KACJN,IACFQ,OAAOC,SAAS,CAAEC,IAAK,EAAGC,SAAU,SAxBZC,MAC1B,MAAMC,EAAOT,EAAcS,KAC3B,GAAIA,EAAM,CACR,MAAMC,EAAYD,EAAKE,QAAQ,IAAK,IAC9BC,EAAUC,SAASC,eAAeJ,GACpCE,GACFA,EAAQG,eAAe,CAAER,SAAU,UAEvC,GAiBEC,GACF,GACC,CAACZ,IAECA,GAKHP,EAAAA,EAAAA,KAAC2B,EAAa,CAAC9B,KAAMU,EAAQT,SAC1B8B,MAAMC,QAAQtB,EAAQuB,OACrBvB,EAAQuB,KAAKC,KAAKlC,IAChBG,EAAAA,EAAAA,KAACgC,EAAAA,GAAkB,CAACnC,KAAMA,GAAWA,EAAKoC,WAPzCjC,EAAAA,EAAAA,KAACkC,EAAAA,EAAO,GASC,C","sources":["components/content_types/LayoutWrapper.tsx","routing/SimpleLayoutLoader.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  SimpleLayoutStoryblok,\n  PageStoryblok,\n} from \"../types/component-types-sb\";\nimport \"./css/simple-layout.css\";\n\ntype LayoutWrapperProps = {\n  blok: SimpleLayoutStoryblok | PageStoryblok;\n  children: React.ReactNode;\n};\n\nconst LayoutWrapper: React.FC<LayoutWrapperProps> = ({ blok, children }) => {\n  if (\"component\" in blok) {\n    switch (blok.component) {\n      case \"SimpleLayout\":\n        return (\n          <div\n            className={`simple-layout ${\n              blok.centerElements ? \"simple-layout-centered\" : \"\"\n            }`}\n          >\n            {children}\n          </div>\n        );\n      case \"page\":\n        return <div>{children}</div>;\n      default:\n        return null;\n    }\n  }\n  return null;\n};\n\nexport default LayoutWrapper;\n","import { useEffect, useState } from \"react\";\nimport { SimpleLayoutStoryblok } from \"../components/types/component-types-sb\";\nimport useStoryblokStory from \"../hooks/useStoryblokStory\";\nimport { logStoryblokStoryOrBlock } from \"../utils/logger\";\nimport LayoutWrapper from \"../components/content_types/LayoutWrapper\";\nimport { SbBlokData, StoryblokComponent } from \"@storyblok/react\";\nimport Loading from \"../components/Loading\";\nimport { useLocation } from \"react-router-dom\";\n\ninterface StoryLoaderProps {\n  slug: string;\n}\n\nconst SimpleLayoutLoader = ({ slug }: StoryLoaderProps) => {\n  const story = useStoryblokStory(slug);\n  const [content, setContent] = useState<SimpleLayoutStoryblok | undefined>(\n    undefined\n  );\n  const routeLocation = useLocation();\n\n  const maybeScrollToAnchor = () => {\n    const hash = routeLocation.hash;\n    if (hash) {\n      const elementId = hash.replace(\"#\", \"\");\n      const element = document.getElementById(elementId);\n      if (element) {\n        element.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n  };\n\n  // Effekt, um den Content zu laden\n  useEffect(() => {\n    if (story) {\n      setContent(story.content as SimpleLayoutStoryblok);\n      logStoryblokStoryOrBlock(slug, story); // Log Story\n    } else {\n      setContent(undefined);\n    }\n  }, [story, slug]);\n\n  // Effekt, um das Scrollen nach dem Laden des Contents zu handhaben\n  useEffect(() => {\n    if (content) {\n      window.scrollTo({ top: 0, behavior: \"auto\" });\n      maybeScrollToAnchor();\n    }\n  }, [content]);\n\n  if (!content) {\n    return <Loading />;\n  }\n\n  return (\n    <LayoutWrapper blok={content}>\n      {Array.isArray(content.body) &&\n        content.body.map((blok: SbBlokData) => (\n          <StoryblokComponent blok={blok} key={blok._uid} />\n        ))}\n    </LayoutWrapper>\n  );\n};\n\nexport default SimpleLayoutLoader;\n"],"names":["_ref","blok","children","component","_jsx","className","concat","centerElements","slug","story","useStoryblokStory","content","setContent","useState","undefined","routeLocation","useLocation","useEffect","logStoryblokStoryOrBlock","window","scrollTo","top","behavior","maybeScrollToAnchor","hash","elementId","replace","element","document","getElementById","scrollIntoView","LayoutWrapper","Array","isArray","body","map","StoryblokComponent","_uid","Loading"],"sourceRoot":""}