{"version":3,"file":"static/js/260.fe914737.chunk.js","mappings":"iLAYA,MAoBA,EApBoDA,IAAyB,IAAxB,KAAEC,EAAI,SAAEC,GAAUF,EACrE,MAAI,cAAeC,GAEV,gBADCA,EAAKE,WAGPC,EAAAA,EAAAA,KAAA,OACEC,UAAS,gBAAAC,OACPL,EAAKM,eAAiB,wBAA0B,IAC/CL,SAEFA,IAOJ,IAAI,E,6BC3BN,MC6EP,EAlE0BF,IAAuC,IAAtC,KAAEQ,GAA8BR,EACzD,MAAMS,GAAQC,EAAAA,EAAAA,GAAkBF,IACzBG,EAASC,IAAcC,EAAAA,EAAAA,eAC5BC,GAEIC,GAAWC,EAAAA,EAAAA,OACVC,EAASC,IAAcL,EAAAA,EAAAA,WAAS,GAEjCM,GAAeC,EAAAA,EAAAA,QAAOL,GA4C5B,OA1CAM,EAAAA,EAAAA,YAAU,KACWF,EAAaG,QAAQC,WAAaR,EAASQ,UAG5DL,GAAW,GAEbM,OAAOC,SAAS,CAAEC,IAAK,EAAGC,SAAU,SAEpCR,EAAaG,QAAUP,CAAQ,GAC9B,CAACA,KAEJM,EAAAA,EAAAA,YAAU,KDhC4BO,IACtCC,EACAC,EADAD,ECgC2BrB,ED/B3BsB,EC+BiCrB,ED7B5BsB,EAAAA,EAAeC,WACpBC,QAAQC,IAAI,sBAAwBL,EAAc,IAAKC,EC4BhB,GACpC,CAACrB,EAAOD,KAEXa,EAAAA,EAAAA,YAAU,KACJZ,GACFG,EAAWH,EAAME,SACjBO,GAAW,KAEXN,OAAWE,GACXI,GAAW,GACb,GACC,CAACT,KAEJY,EAAAA,EAAAA,YAAU,MAYHJ,GAAkB,OAAPN,QAAO,IAAPA,GAAAA,EAASwB,MAXGC,MAC1B,MAAMC,EAAOtB,EAASsB,KACtB,GAAIA,EAAM,CACR,MAAMC,EAAYD,EAAKE,QAAQ,IAAK,IAC9BC,EAAUC,SAASC,eAAeJ,GACpCE,GACFA,EAAQG,eAAe,CAAEhB,SAAU,UAEvC,GAIAS,EACF,GACC,CAACnB,EAASN,EAASI,EAASsB,QAE1B1B,GAAWM,GACPb,EAAAA,EAAAA,KAACwC,EAAAA,EAAO,KAIfxC,EAAAA,EAAAA,KAACyC,EAAa,CAAC5C,KAAMU,EAAQT,SAC1B4C,MAAMC,QAAQpC,EAAQwB,OACrBxB,EAAQwB,KAAKa,KAAK/C,IAChBG,EAAAA,EAAAA,KAAC6C,EAAAA,GAAkB,CAAChD,KAAMA,GAAWA,EAAKiD,SAEhC,C","sources":["components/content_types/LayoutWrapper.tsx","utils/logger.ts","routing/BasicLayoutLoader.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  BasicLayoutStoryblok,\n  PageStoryblok,\n} from \"../types/component-types-sb\";\nimport \"./css/basic-layout.css\";\n\ntype LayoutWrapperProps = {\n  blok: BasicLayoutStoryblok | PageStoryblok;\n  children: React.ReactNode;\n};\n\nconst LayoutWrapper: React.FC<LayoutWrapperProps> = ({ blok, children }) => {\n  if (\"component\" in blok) {\n    switch (blok.component) {\n      case \"BasicLayout\":\n        return (\n          <div\n            className={`basic-layout ${\n              blok.centerElements ? \"basic-layout-centered\" : \"\"\n            }`}\n          >\n            {children}\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n  return null;\n};\n\nexport default LayoutWrapper;\n","import storyblokSetup from \"../setupStoryblok\";\n\nexport const logStoryblokStoryOrBlock = (\n  slugOrBlock: string,\n  storyOrBlock: any\n) => {\n  if (!storyblokSetup.debugLogs) return;\n  console.log(\"Storyblok content (\" + slugOrBlock + \")\", storyOrBlock);\n};\n","import { SbBlokData, StoryblokComponent } from \"@storyblok/react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport LayoutWrapper from \"../components/content_types/LayoutWrapper\";\nimport Loading from \"../components/Loading\";\nimport { BasicLayoutStoryblok } from \"../components/types/component-types-sb\";\nimport useStoryblokStory from \"../hooks/useStoryblokStory\";\nimport { logStoryblokStoryOrBlock } from \"../utils/logger\";\n\ninterface BasicLayoutLoaderProps {\n  slug: string;\n}\n\nconst BasicLayoutLoader = ({ slug }: BasicLayoutLoaderProps) => {\n  const story = useStoryblokStory(slug);\n  const [content, setContent] = useState<BasicLayoutStoryblok | undefined>(\n    undefined\n  );\n  const location = useLocation();\n  const [loading, setLoading] = useState(false);\n\n  const prevLocation = useRef(location);\n\n  useEffect(() => {\n    const isSamePath = prevLocation.current.pathname === location.pathname;\n\n    if (!isSamePath) {\n      setLoading(true);\n    }\n    window.scrollTo({ top: 0, behavior: \"auto\" });\n\n    prevLocation.current = location;\n  }, [location]);\n\n  useEffect(() => {\n    logStoryblokStoryOrBlock(slug, story);\n  }, [story, slug]);\n\n  useEffect(() => {\n    if (story) {\n      setContent(story.content as BasicLayoutStoryblok);\n      setLoading(false);\n    } else {\n      setContent(undefined);\n      setLoading(true);\n    }\n  }, [story]);\n\n  useEffect(() => {\n    const maybeScrollToAnchor = () => {\n      const hash = location.hash;\n      if (hash) {\n        const elementId = hash.replace(\"#\", \"\");\n        const element = document.getElementById(elementId);\n        if (element) {\n          element.scrollIntoView({ behavior: \"smooth\" });\n        }\n      }\n    };\n\n    if (!loading && content?.body) {\n      maybeScrollToAnchor();\n    }\n  }, [loading, content, location.hash]);\n\n  if (!content || loading) {\n    return <Loading />;\n  }\n\n  return (\n    <LayoutWrapper blok={content}>\n      {Array.isArray(content.body) &&\n        content.body.map((blok: SbBlokData) => (\n          <StoryblokComponent blok={blok} key={blok._uid} />\n        ))}\n    </LayoutWrapper>\n  );\n};\n\nexport default BasicLayoutLoader;\n"],"names":["_ref","blok","children","component","_jsx","className","concat","centerElements","slug","story","useStoryblokStory","content","setContent","useState","undefined","location","useLocation","loading","setLoading","prevLocation","useRef","useEffect","current","pathname","window","scrollTo","top","behavior","logStoryblokStoryOrBlock","slugOrBlock","storyOrBlock","storyblokSetup","debugLogs","console","log","body","maybeScrollToAnchor","hash","elementId","replace","element","document","getElementById","scrollIntoView","Loading","LayoutWrapper","Array","isArray","map","StoryblokComponent","_uid"],"sourceRoot":""}