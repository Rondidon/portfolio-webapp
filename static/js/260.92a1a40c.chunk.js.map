{"version":3,"file":"static/js/260.92a1a40c.chunk.js","mappings":"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","sources":["components/content_types/LayoutWrapper.tsx","utils/logger.ts","routing/BasicLayoutLoader.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  BasicLayoutStoryblok,\n  PageStoryblok,\n} from \"../types/component-types-sb\";\nimport \"./css/basic-layout.css\";\n\ntype LayoutWrapperProps = {\n  blok: BasicLayoutStoryblok | PageStoryblok;\n  children: React.ReactNode;\n};\n\nconst LayoutWrapper: React.FC<LayoutWrapperProps> = ({ blok, children }) => {\n  if (\"component\" in blok) {\n    switch (blok.component) {\n      case \"BasicLayout\":\n        return (\n          <div\n            className={`basic-layout ${\n              blok.centerElements ? \"basic-layout-centered\" : \"\"\n            }`}\n          >\n            {children}\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n  return null;\n};\n\nexport default LayoutWrapper;\n","import storyblokSetup from \"../setupStoryblok\";\n\nexport const logStoryblokStoryOrBlock = (\n  slugOrBlock: string,\n  storyOrBlock: any\n) => {\n  if (!storyblokSetup.debugLogs) return;\n  console.log(\"Storyblok content (\" + slugOrBlock + \")\", storyOrBlock);\n};\n","import { SbBlokData, StoryblokComponent } from \"@storyblok/react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport LayoutWrapper from \"../components/content_types/LayoutWrapper\";\nimport Loading from \"../components/Loading\";\nimport { BasicLayoutStoryblok } from \"../components/types/component-types-sb\";\nimport useStoryblokStory from \"../hooks/useStoryblokStory\";\nimport { logStoryblokStoryOrBlock } from \"../utils/logger\";\n\ninterface BasicLayoutLoaderProps {\n  slug: string;\n}\n\nconst BasicLayoutLoader = ({ slug }: BasicLayoutLoaderProps) => {\n  const story = useStoryblokStory(slug);\n  const [content, setContent] = useState<BasicLayoutStoryblok | undefined>(\n    undefined\n  );\n  const location = useLocation();\n  const [loading, setLoading] = useState(false);\n\n  const locationRef = useRef(location);\n\n  const scrollPositionHistory = useRef<Map<string, number>>(new Map());\n  const locationChangeByPopState = useRef<boolean>(false);\n\n  useEffect(() => {\n    const isSamePath = locationRef.current.pathname === location.pathname; // locationRef is previous location at this point\n\n    if (!isSamePath) {\n      setLoading(true);\n      window.scrollTo({ top: 0, behavior: \"auto\" });\n    }\n    if (isSamePath) {\n      window.scrollTo({ top: 0, behavior: \"auto\" });\n    }\n\n    locationRef.current = location; // update location ref to current location\n  }, [location]);\n\n  useEffect(() => {\n    logStoryblokStoryOrBlock(slug, story);\n  }, [story, slug]);\n\n  useEffect(() => {\n    const saveScrollPosition = (event: MouseEvent) => {\n      console.log(locationRef.current.pathname, window.scrollY);\n      scrollPositionHistory.current.set(\n        locationRef.current.pathname,\n        window.scrollY\n      );\n    };\n\n    window.addEventListener(\"mousedown\", saveScrollPosition);\n    return () => {\n      window.removeEventListener(\"mousedown\", saveScrollPosition);\n    };\n  }, [slug]);\n\n  useEffect(() => {\n    const restoreScrollPositon = () => {\n      setTimeout(() => {\n        const path = locationRef.current.pathname;\n        const scrollY = scrollPositionHistory.current.get(path);\n        window.scrollTo({ top: scrollY, behavior: \"auto\" });\n        locationChangeByPopState.current = false;\n      }, 100);\n    };\n\n    if (story) {\n      setContent(story.content as BasicLayoutStoryblok);\n      setLoading(false);\n      if (locationChangeByPopState.current === true) {\n        restoreScrollPositon();\n      }\n    } else {\n      setContent(undefined);\n      setLoading(true);\n    }\n  }, [story]);\n\n  useEffect(() => {\n    const onPopStateEvent = (event: PopStateEvent) => {\n      locationChangeByPopState.current = true;\n    };\n\n    window.addEventListener(\"popstate\", onPopStateEvent);\n    return () => {\n      window.removeEventListener(\"popstate\", onPopStateEvent);\n    };\n  }, []);\n\n  useEffect(() => {\n    const maybeScrollToAnchor = () => {\n      if (locationChangeByPopState.current === true) {\n        return;\n      }\n\n      const hash = location.hash;\n      if (hash) {\n        const elementId = hash.replace(\"#\", \"\");\n        const element = document.getElementById(elementId);\n        if (element) {\n          element.scrollIntoView({ behavior: \"smooth\" });\n          const elementYPosition = element.getBoundingClientRect().y;\n          scrollPositionHistory.current.set(\n            locationRef.current.pathname,\n            elementYPosition\n          );\n        }\n      }\n    };\n\n    if (!loading && content?.body) {\n      maybeScrollToAnchor();\n    }\n  }, [loading, content, location.hash]);\n\n  if (!content || loading) {\n    return <Loading />;\n  }\n\n  return (\n    <LayoutWrapper blok={content}>\n      {Array.isArray(content.body) &&\n        content.body.map((blok: SbBlokData) => (\n          <StoryblokComponent blok={blok} key={blok._uid} />\n        ))}\n    </LayoutWrapper>\n  );\n};\n\nexport default BasicLayoutLoader;\n"],"names":["_ref","blok","children","component","_jsx","className","concat","centerElements","slug","story","useStoryblokStory","content","setContent","useState","undefined","location","useLocation","loading","setLoading","locationRef","useRef","scrollPositionHistory","Map","locationChangeByPopState","useEffect","isSamePath","current","pathname","window","scrollTo","top","behavior","logStoryblokStoryOrBlock","slugOrBlock","storyOrBlock","storyblokSetup","debugLogs","console","log","saveScrollPosition","event","scrollY","set","addEventListener","removeEventListener","setTimeout","path","get","onPopStateEvent","body","maybeScrollToAnchor","hash","elementId","replace","element","document","getElementById","scrollIntoView","elementYPosition","getBoundingClientRect","y","Loading","LayoutWrapper","Array","isArray","map","StoryblokComponent","_uid"],"sourceRoot":""}