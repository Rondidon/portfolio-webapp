{"version":3,"file":"static/js/621.eb36787b.chunk.js","mappings":"+KAYA,MAsBA,EAtBoDA,IAAyB,IAAxB,KAAEC,EAAI,SAAEC,GAAUF,EACrE,GAAI,cAAeC,EACjB,OAAQA,EAAKE,WACX,IAAK,eACH,OACEC,EAAAA,EAAAA,KAAA,OACEC,UAAS,iBAAAC,OACPL,EAAKM,eAAiB,yBAA2B,IAChDL,SAEFA,IAGP,IAAK,OACH,OAAOE,EAAAA,EAAAA,KAAA,OAAAF,SAAMA,IACf,QACE,OAAO,KAGb,OAAO,IAAI,E,+BClBb,MA0EA,EA1E2BF,IAAiC,IAAhC,KAAEQ,GAAwBR,EACpD,MAAMS,GAAQC,EAAAA,EAAAA,GAAkBF,IACzBG,EAASC,IAAcC,EAAAA,EAAAA,eAC5BC,IAEKC,EAAgBC,IAAqBH,EAAAA,EAAAA,WAAS,GAC/CI,GAAgBC,EAAAA,EAAAA,MAChBC,GAAmBC,EAAAA,EAAAA,SAAO,IACzBC,EAASC,IAAcT,EAAAA,EAAAA,WAAS,GAEjCU,EAAsBA,KAC1B,MAAMC,EAAOP,EAAcO,KAC3B,GAAIA,EAAM,CACR,MAAMC,EAAYD,EAAKE,QAAQ,IAAK,IAC9BC,EAAUC,SAASC,eAAeJ,GACpCE,GACFA,EAAQG,eAAe,CAAEC,SAAU,UAEvC,GA0CF,OAvCAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAiBA,KACrBd,EAAiBe,SAAU,EAC3BZ,GAAW,EAAK,EAKlB,OAFAa,OAAOC,iBAAiB,WAAYH,GAE7B,KACLE,OAAOE,oBAAoB,WAAYJ,EAAe,CACvD,GACA,KAEHD,EAAAA,EAAAA,YAAU,MACRM,EAAAA,EAAAA,GAAyB9B,EAAMC,EAAM,GACpC,CAACA,EAAOD,KAEXwB,EAAAA,EAAAA,YAAU,KACJvB,GACFG,EAAWH,EAAME,SACjBK,GAAkB,GAClBM,GAAW,KAEXV,OAAWE,GACXE,GAAkB,GACpB,GACC,CAACP,KAEJuB,EAAAA,EAAAA,YAAU,KACJjB,GAAyB,OAAPJ,QAAO,IAAPA,GAAAA,EAAS4B,OACxBpB,EAAiBe,QAIpBf,EAAiBe,SAAU,GAH3BC,OAAOK,SAAS,CAAEC,IAAK,EAAGV,SAAU,SACpCR,KAIJ,GACC,CAACR,EAAgBJ,EAASY,KAExBZ,GAAWU,GACPjB,EAAAA,EAAAA,KAACsC,EAAAA,EAAO,KAIftC,EAAAA,EAAAA,KAACuC,EAAa,CAAC1C,KAAMU,EAAQT,SAC1B0C,MAAMC,QAAQlC,EAAQ4B,OACrB5B,EAAQ4B,KAAKO,KAAK7C,IAChBG,EAAAA,EAAAA,KAAC2C,EAAAA,GAAkB,CAAC9C,KAAMA,GAAWA,EAAK+C,SAEhC,C","sources":["components/content_types/LayoutWrapper.tsx","routing/SimpleLayoutLoader.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  SimpleLayoutStoryblok,\n  PageStoryblok,\n} from \"../types/component-types-sb\";\nimport \"./css/simple-layout.css\";\n\ntype LayoutWrapperProps = {\n  blok: SimpleLayoutStoryblok | PageStoryblok;\n  children: React.ReactNode;\n};\n\nconst LayoutWrapper: React.FC<LayoutWrapperProps> = ({ blok, children }) => {\n  if (\"component\" in blok) {\n    switch (blok.component) {\n      case \"SimpleLayout\":\n        return (\n          <div\n            className={`simple-layout ${\n              blok.centerElements ? \"simple-layout-centered\" : \"\"\n            }`}\n          >\n            {children}\n          </div>\n        );\n      case \"page\":\n        return <div>{children}</div>;\n      default:\n        return null;\n    }\n  }\n  return null;\n};\n\nexport default LayoutWrapper;\n","import { useEffect, useState, useRef } from \"react\";\nimport { SimpleLayoutStoryblok } from \"../components/types/component-types-sb\";\nimport useStoryblokStory from \"../hooks/useStoryblokStory\";\nimport { logStoryblokStoryOrBlock } from \"../utils/logger\";\nimport LayoutWrapper from \"../components/content_types/LayoutWrapper\";\nimport { SbBlokData, StoryblokComponent } from \"@storyblok/react\";\nimport Loading from \"../components/Loading\";\nimport { useLocation } from \"react-router-dom\";\n\ninterface StoryLoaderProps {\n  slug: string;\n}\n\nconst SimpleLayoutLoader = ({ slug }: StoryLoaderProps) => {\n  const story = useStoryblokStory(slug);\n  const [content, setContent] = useState<SimpleLayoutStoryblok | undefined>(\n    undefined\n  );\n  const [isContentReady, setIsContentReady] = useState(false);\n  const routeLocation = useLocation();\n  const isBackNavigation = useRef(false);\n  const [loading, setLoading] = useState(false);\n\n  const maybeScrollToAnchor = () => {\n    const hash = routeLocation.hash;\n    if (hash) {\n      const elementId = hash.replace(\"#\", \"\");\n      const element = document.getElementById(elementId);\n      if (element) {\n        element.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n  };\n\n  useEffect(() => {\n    const handlePopState = () => {\n      isBackNavigation.current = true;\n      setLoading(true);\n    };\n\n    window.addEventListener(\"popstate\", handlePopState);\n\n    return () => {\n      window.removeEventListener(\"popstate\", handlePopState);\n    };\n  }, []);\n\n  useEffect(() => {\n    logStoryblokStoryOrBlock(slug, story);\n  }, [story, slug]);\n\n  useEffect(() => {\n    if (story) {\n      setContent(story.content as SimpleLayoutStoryblok);\n      setIsContentReady(true);\n      setLoading(false);\n    } else {\n      setContent(undefined);\n      setIsContentReady(false);\n    }\n  }, [story]);\n\n  useEffect(() => {\n    if (isContentReady && content?.body) {\n      if (!isBackNavigation.current) {\n        window.scrollTo({ top: 0, behavior: \"auto\" });\n        maybeScrollToAnchor();\n      } else {\n        isBackNavigation.current = false;\n      }\n    }\n  }, [isContentReady, content, maybeScrollToAnchor]);\n\n  if (!content || loading) {\n    return <Loading />;\n  }\n\n  return (\n    <LayoutWrapper blok={content}>\n      {Array.isArray(content.body) &&\n        content.body.map((blok: SbBlokData) => (\n          <StoryblokComponent blok={blok} key={blok._uid} />\n        ))}\n    </LayoutWrapper>\n  );\n};\n\nexport default SimpleLayoutLoader;\n"],"names":["_ref","blok","children","component","_jsx","className","concat","centerElements","slug","story","useStoryblokStory","content","setContent","useState","undefined","isContentReady","setIsContentReady","routeLocation","useLocation","isBackNavigation","useRef","loading","setLoading","maybeScrollToAnchor","hash","elementId","replace","element","document","getElementById","scrollIntoView","behavior","useEffect","handlePopState","current","window","addEventListener","removeEventListener","logStoryblokStoryOrBlock","body","scrollTo","top","Loading","LayoutWrapper","Array","isArray","map","StoryblokComponent","_uid"],"sourceRoot":""}