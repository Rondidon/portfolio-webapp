%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2394 2394
%%HiResBoundingBox: 0 0 2394 2394
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2394 2394 re
W
q
[0.24 0 0 -0.24 0 2394] cm
q
0 0 9975 9975 re
W*
q
[46.756241 0 0 46.756241 300 300] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
100.253998 0 m
44.973999 0 0 44.973999 0 100.253998 c
0 155.533997 44.973999 200.508 100.253998 200.508 c
155.533997 200.508 200.508 155.533997 200.508 100.253998 c
200.508 44.973999 155.533997 0 100.253998 0 c
h
100.253998 195.508 m
47.730999 195.508 5 152.776993 5 100.253998 c
5 47.731003 47.730999 5 100.253998 5 c
152.776993 5 195.508 47.73 195.508 100.253998 c
195.508 152.778 152.776993 195.508 100.253998 195.508 c
h
f
Q
q
[83.358345 0 0 83.358345 3060.0005 604.55157] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
46.139999 60 m
29.939999 60 l
24.48 50.580002 l
13.98 50.580002 l
13.98 60 l
0 60 l
0 36.599998 l
34.32 36.66 l
38.220001 36.66 41.34 33.48 41.34 29.639999 c
41.34 25.74 38.220001 22.619999 34.32 22.619999 c
4.68 22.619999 l
4.68 27.299999 l
34.32 27.299999 l
35.579998 27.359999 36.540001 28.379999 36.540001 29.639999 c
36.540001 30.9 35.580002 31.92 34.32 31.98 c
34.259998 31.98 l
34.199997 31.98 l
-0.000004 31.98 l
-0.000004 17.939999 l
34.319996 17.939999 l
40.799995 17.939999 46.019997 23.159998 46.019997 29.639999 c
46.019997 36.059998 40.799995 41.34 34.319996 41.34 c
4.679997 41.279999 l
4.679997 55.32 l
9.359997 55.32 l
9.359997 45.900002 l
27.179996 45.900002 l
29.099997 49.380001 32.339996 54.720001 32.639996 55.32 c
38.039997 55.32 l
37.559998 54.66 34.799995 49.739998 32.579998 45.900002 c
37.98 45.900002 l
39.959999 49.32 41.939999 52.860001 43.559998 55.5 c
46.139999 60 l
h
f
Q
q
[41.562763 0 0 41.562763 1980.0001 5762.7852] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
10.96 40.080002 m
6.88 40.080002 l
4.68 34.040001 l
3.8 34.040001 l
3.8 40.080002 l
0 40.080002 l
0 11.440002 l
5.96 11.440002 l
8.6 11.440002 10.72 13.560002 10.72 16.200003 c
10.72 29.280003 l
10.72 31.000002 9.84 32.480003 8.480001 33.320004 c
10.96 40.080002 l
h
3.8 15.24 m
3.8 30.24 l
5.96 30.24 l
6.48 30.24 6.92 29.799999 6.92 29.279999 c
6.92 16.199999 l
6.92 15.679998 6.48 15.239999 5.96 15.239999 c
3.8 15.239999 l
3.8 15.24 l
h
18.360001 40.040001 m
15.360001 40.040001 12.960001 37.600002 12.960001 34.639999 c
12.960001 16.68 l
12.960001 13.72 15.360001 11.32 18.360001 11.32 c
21.32 11.32 23.720001 13.719999 23.720001 16.68 c
23.720001 34.639999 l
23.720001 37.599998 21.320002 40.040001 18.360001 40.040001 c
h
18.360001 15.12 m
17.480001 15.12 16.800001 15.84 16.800001 16.68 c
16.800001 34.639999 l
16.800001 35.52 17.480001 36.200001 18.360001 36.200001 c
19.200001 36.200001 19.92 35.52 19.92 34.639999 c
19.92 16.68 l
19.92 15.84 19.200001 15.120001 18.360001 15.120001 c
18.360001 15.12 l
h
35.040001 23.040001 m
35.920002 23.92 36.48 25.120001 36.48 26.440001 c
36.48 35.200001 l
36.48 37.84 34.32 40 31.68 40 c
25.76 40 l
25.719999 11.520001 l
31 11.520001 l
33.919998 11.64 35.639999 14.440001 35.599998 17.08 c
35.559998 21.040001 l
35.559998 21.76 35.359997 22.440001 35.039997 23.040001 c
35.040001 23.040001 l
h
31.68 36.16 m
32.240002 36.16 32.68 35.720001 32.68 35.200001 c
32.639999 26.440001 l
32.639999 25.880001 32.200001 25.48 31.68 25.48 c
29.560001 25.48 l
29.560001 36.16 l
31.68 36.16 l
h
29.52 15.32 m
29.52 21.639999 l
31.120001 21.639999 l
31.440001 21.639999 31.76 21.359999 31.76 21 c
31.800001 17.040001 l
31.800001 16.240002 31.400002 15.360001 30.84 15.320001 c
29.52 15.320001 l
29.52 15.32 l
h
42.279999 11.36 m
42.279999 39.84 l
38.48 39.84 l
38.48 11.360001 l
42.279999 11.360001 l
42.279999 11.36 l
h
53.560001 33.439999 m
53.720001 11.279999 l
57.560001 11.279999 l
57.32 40.159996 l
51.360001 40.159996 l
48.119999 17.799995 l
48.119999 40.159996 l
44.279999 40.159996 l
44.279999 11.279997 l
50.48 11.279997 l
53.560001 33.439999 l
h
64.919998 39.919998 m
61.959999 39.919998 59.559998 37.519997 59.559998 34.559998 c
59.559998 16.799997 l
59.559998 13.839997 61.959999 11.439997 64.919998 11.439997 c
67.879997 11.439997 70.279999 13.839996 70.279999 16.799997 c
70.279999 18.399998 l
66.479996 18.399998 l
66.479996 16.799997 l
66.479996 15.959997 65.759995 15.239998 64.919998 15.239998 c
64.080002 15.239998 63.359997 15.959998 63.359997 16.799997 c
63.359997 34.559998 l
63.359997 35.399998 64.079994 36.119999 64.919998 36.119999 c
65.760002 36.119999 66.479996 35.399998 66.479996 34.559998 c
66.479996 31.999998 l
70.279999 31.999998 l
70.279999 34.559998 l
70.279999 37.519997 67.879997 39.919998 64.919998 39.919998 c
h
77.68 40.040001 m
74.68 40.040001 72.279999 37.600002 72.279999 34.639999 c
72.279999 16.68 l
72.279999 13.72 74.68 11.32 77.68 11.32 c
80.639999 11.32 83.040001 13.719999 83.040001 16.68 c
83.040001 34.639999 l
83.040001 37.599998 80.639999 40.040001 77.68 40.040001 c
h
77.68 15.12 m
76.800003 15.12 76.120003 15.84 76.120003 16.68 c
76.120003 34.639999 l
76.120003 35.52 76.800003 36.200001 77.68 36.200001 c
78.519997 36.200001 79.239998 35.52 79.239998 34.639999 c
79.239998 16.68 l
79.239998 15.84 78.519997 15.120001 77.68 15.120001 c
77.68 15.12 l
h
90.040001 40.040001 m
85.040001 40.040001 l
85.040001 11.520001 l
90.040001 11.520001 l
93.440002 11.520001 96.160004 14.280001 96.160004 17.68 c
96.160004 33.880001 l
96.160004 35.52 95.520004 37.080002 94.360001 38.240002 c
93.199997 39.400002 91.68 40.040001 90.040001 40.040001 c
h
88.839996 15.36 m
88.839996 36.200001 l
90.039993 36.200001 l
90.639992 36.200001 91.23999 35.959999 91.679993 35.52 c
92.119995 35.080002 92.359993 34.52 92.359993 33.880001 c
92.359993 17.68 l
92.359993 16.4 91.319992 15.360001 90.039993 15.360001 c
88.839996 15.360001 l
88.839996 15.36 l
h
107.480003 24.92 m
101.960007 24.92 l
101.960007 36.200001 l
107.520004 36.200001 l
107.520004 40 l
98.160004 40 l
98.160004 11.440001 l
107.520004 11.440001 l
107.520004 15.240001 l
101.960007 15.240001 l
101.960007 21.120001 l
107.480003 21.120001 l
107.480003 24.92 l
h
115 40.240002 m
111.959999 40.240002 109.519997 37.760002 109.519997 34.760002 c
109.519997 30.400002 l
113.399994 30.400002 l
113.399994 34.760002 l
113.399994 35.640003 114.119995 36.360001 114.999992 36.360001 c
115.87999 36.360001 116.55999 35.639999 116.55999 34.760002 c
116.55999 30.960003 l
109.519989 21.240002 l
109.519989 16.280003 l
109.519989 13.240003 111.959991 10.760002 114.999992 10.760002 c
117.999992 10.760002 120.439995 13.240002 120.439995 16.280003 c
120.439995 20.600002 l
116.559998 20.600002 l
116.559998 16.280003 l
116.559998 15.360003 115.879997 14.680002 115 14.680002 c
114.120003 14.680002 113.400002 15.360003 113.400002 16.280003 c
113.400002 19.920002 l
120.440002 29.640003 l
120.440002 34.760002 l
120.440002 37.760002 118 40.240002 115 40.240002 c
h
125.800003 40 m
122.440002 40 l
122.440002 36.32 l
125.800003 36.32 l
125.800003 40 l
h
131.600006 11.36 m
131.600006 39.84 l
127.800003 39.84 l
127.800003 11.360001 l
131.600006 11.360001 l
131.600006 11.36 l
h
139 40.040001 m
136 40.040001 133.600006 37.600002 133.600006 34.639999 c
133.600006 16.68 l
133.600006 13.72 136 11.32 139 11.32 c
141.960007 11.32 144.360001 13.719999 144.360001 16.68 c
144.360001 34.639999 l
144.360001 37.599998 141.960007 40.040001 139 40.040001 c
h
139 15.12 m
138.119995 15.12 137.440002 15.84 137.440002 16.68 c
137.440002 34.639999 l
137.440002 35.52 138.119995 36.200001 139 36.200001 c
139.839996 36.200001 140.559998 35.52 140.559998 34.639999 c
140.559998 16.68 l
140.559998 15.84 139.839996 15.120001 139 15.120001 c
139 15.12 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
